             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Adam Fiksen  < af1410@ic.ac.uk >
Ryan Jackson < diddydonuts@gmail.com  >
Sahil Jain   < sdj09@ic.ac.uk  >

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct child_status
{
  tid_t tid;
  int status;
  struct semaphore sema;
  struct list_elem elem;
};

this is used in process_wait - the parent has a list of children, and when the 
semaphore is upped, is able to read the (exit) status.

WITHIN struct thread:

  struct list children;               

List of child processes, needed for process waiting

  struct thread * parent;				      /* Pointer to parent thread */

A pointer to the threads parent - needed to change the status of this thread in
parent's list of children.

  struct semaphore exec_sema;         /* Used to wait for a child process to load */
  bool load_fail;                     /* set to true when child process fails to load */

The semaphore is used to ensure synchronisation on exec - the parent process must
wait for the child to up the sema. load_fail informs the parent if the load failed
(meaning the return id = -1).

struct fd_elems
{
  int fd;
  struct file *file;
  tid_t tid;
  struct list_elem elem;
};

This is used as the struct for storing file descriptors, and it contains its
corresponding file and tid. We have included struct list_elem elem because
we store all the file descriptors as a list.
For this list, we have used a static variable in syscall.c. This is declared 
as below:

static struct list fd_list;

To allocate new int fds, we have used a static variable in syscall.c. This is
declared as below:

static int new_fd = 2;

This is initialised to 2 because 0 and 1 are already in use. So when a file is 
added to fd_list, we use new_fd's value, and then increment it. This is done in 
execute_open using the following code:

new_file->fd = new_fd++;

To deny writes to executables, we added a field to struct thread. We added
struct file *file to struct thread, which carries the address of the executable.
In load in process.c, we have removed file_close (file), and we use file_deny_write 
to disallow writes to the executable. In process_exit, we have added file_close (file)
which automatically lets writing to the file. Implementing this allows us to 
deny writes to executables, which allows the rox tests to work.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a file is opened in execute_opened, a memory is allocated for a new struct 
fd_elems and it is created. The file is given a unique fd number. The struct
stores the address to the file which has been opened, its unique fd number and
the tid of the thread on which it is running. This is then pushed to the back
of the list fd_list, which stores all of the open files.
When the file is closed, the entry is deleted from fd_list, and the memory is
freed.
In our implementation, file descriptors are unique within the entire OS. We found
this easier to implement as we just stored the tid of the thread on which the
file was opened. One list kept track of all the opened files.

---- ALGORITHMS ----

>> B3: Describe your kernel code for reading and writing user data.

Read:
execute_read takes in 3 parameters, which are the fd, buffer and size. The method
reads the number of bytes (which is the input size), from the file open as fd into
the buffer. It returns the number of bytes actually read, or -1 if the file
could not be read.
There is a special case for when fd == 0 (which is STDIN_FILENO). This means 
that we have to read from the keyboard. In our code, we have a special case for this.
We then for a for loops which starts with the number of bytes read being 0 and
reads till the number of bytes read is the same as the input size. For every
byte incremented, we read a byte from the keyboard. We then return the number of 
bytes that are read.
If fd does not equal 0, we find the file associated with the input fd (the
file would be NULL is fd = 1). If the file is NULL, we return -1 because the
file could not be read. Otherwise, we first acquire a lock so no other process
can read the file. Then we read the file using file_read, which was previously
defined in the given code. file_read returns the number of bytes read. As we are
returning uint32_t, we cast the return value of file_read to uint32_t. Once this
is done, we release the lock so other processes can access the file. We then
return the number of bytes read.

Write:
This method is done in a similar fashion to execute_write. It takes in the same 
arguments as execute_read. The method writes "size" number of bytes from the buffer
to the open file fd. It returns the number of bytes actually written.
We have a special case for when fd = 1. In this case, we have to write to the console
and we do that using the already implemented method called putbuf. We then return
the number of bytes written.
Otherwise, we find the file associated with the input fd. If the file is null, we
return 0, as 0 bytes are written. If the file is found, then we acquire a lock so 
that no other process can access the file. We then use the given method called
file_write to return the number of bytes written. Because we return a uint32_t,
we cast the returned value of file_write to uint32_t. We then release the lock so
other processes can access the file. We then return the number of bytes actually
written. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
The system call merely calls the process_wait function and returns the id this
process. The actual implementation of process_wait requires each thread to have
a list of child_status and a pointer to its parent. Each child status has an id
relating to the child process, and exit status, and a semaphore. When a child process
exits, it sets its own status in the parent thread's list to the correct status
and then ups the semaphore. A parent process will wait on this semaphore, reading
the childs status when it is allowed to continue.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
Threads have a semaphore for the purpose of synchronisation of exec system calls.
Immediately following a thread calling process_execute, the thread calls down
on its exec_sema. This blocks the thread until the child process has either been
able to load (in which case the thread is unblocked and returns the correct id),
or the thread has been unable to load, in which case the parent thread's load_fail
value is set to true, then the thread is unblocked. If this happens, the load_fail
value results in an error value being returned.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
Wait before C exits:
If P calls wait, it is forced to wait on a semaphore that C ups before actually
attempting to use anything associated with C.

Wait after C exits:
The semaphore will already have been upped by the child process when it dies so
no waiting is necessary. Because C is already dead, there are no race conditions.

The child_status struct is removed from the parent's list and the memory is freed
in both these conditions at the end of process_wait.

If P



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages to use the list for file descriptors is that it is dynamic. We allocate
memory when we add an entry to the list, and we free it when we delete it.
Disadvantages are that we have to iterate through the list several times, which
can be time consuming. We could have used arrays or hash tables, which would mean
that we would not need to iterate through possibly several entries. 
But we did not do this to save memory and because in some cases, we have to iterate
through the list because we check the tid of every entry and then remove specific ones.
Implementing a list was the most effective and feasible solution we could come up
with. It was also already implemented, so it was less time consuming while coding.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

N/A

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?

